ggplot2
=======
We will learn to use it to create plots like this

.. image:: /_static/images/ggplot-ex.png

ggplot2 syntax
==============

.. code-block:: r

    library(ggplot2)
    dfx <- read.delim('expr-geno-covs.txt')

    ggplot(dfx, aes(x=genotype, y=expression)) +
        geom_point()

.. nextslide::
    :increment:

``aes()`` stands for **aesthetics**, which specifies the the coordinates,
colors, size, etc from these columns in the data.frame.

.. code-block:: r

    aes(x=genotype, y=expression, color=gender)

``geom_point()`` means plot these as points, could be ``geom_line()`` or 
a number of other `geoms`.

googling with ggplot2
=====================

Use google to find how to change the y-scale on this plot to log10

.. code-block:: r

    library(ggplot2)
    dfx = read.delim('expr-geno-covs.txt')

    ggplot(dfx, aes(x=genotype, y=expression)) +
            geom_point()

answer
======

.. code-block:: r
    :emphasize-lines: 6

    library(ggplot2)
    dfx <- read.delim('expr-geno-covs.txt')

    ggplot(dfx, aes(x=genotype, y=expression)) +
            geom_point() +
            scale_y_log10()

You can find a lot of info for ggplot2 with some googling.

ggplot2 documentation
=====================

The ggplot2 docs are very good: http://docs.ggplot2.org/current/

Look at the `geom_point()` documentation and change the color
of the plot above so that males and females are color'ed differently.

DataFrame
=========
In a data.frame, we read everything into memory

+ R figures out if it is int/character/numeric
+ each column of the data.frame is accessed by `$`  e.g df$genotype

Histograms
==========
One of the simplest things to do in R, without ggplot is to look at 
a histogram of your data:

.. code-block:: r

    hist(dfx$expression)
    # or
    hist(log(dfx$expression))

You can make these look a lot nicer with ggplot2.

``hist()`` does not work with ggplot, you'll have to use the
ggplot2 machinery for that:

.. nextslide::
    :increment:

.. code-block:: r

    gp <- ggplot(dfx, aex(x=log10(expression))
    gp + geom_histgram()

Try to figure out how to overlay a density plot with ``geom_density()``.

.. nextslide::
    :increment:

You can also make effective separate visualizations with ``facet_grid()``
and ``facet_wrap()``. You need to specify a formula to determine how to
separate:

.. code-block:: r

    gp <- ggplot(df, aes(x=genotype, y=expression)) + geom_point()

    # separate by gender
    gp + facet_grid(~ gender)

    # separate by gender and condition
    gp + facet_grid(condition ~ gender)

Exercises
=========

#. Make a histogram using ggplot and separate cases from controls by
   changing fill color and symbol type.

#. Make a histogram using ggplot and separate cases from controls
   using ``facet_grid()``, ``facet_wrap()``.


